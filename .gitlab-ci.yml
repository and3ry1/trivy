# ==============================================
# CONFIGURATION GITLAB CI/CD AVEC TRIVY - SIMPLE
# ==============================================

# D√©finition des √©tapes du pipeline
# L'ordre est important : chaque √©tape attend que la pr√©c√©dente soit termin√©e
stages:
  - build      # Construction de l'image Docker
  - scan       # Scan de s√©curit√© avec Trivy
  - deploy     # D√©ploiement (si scan OK)

# Variables globales utilis√©es dans tout le pipeline
variables:
  # Version de Trivy √† utiliser
  TRIVY_VERSION: "0.48.0"
  
  # Image Docker √† construire
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  
  # Niveau de s√©v√©rit√© minimum pour bloquer le pipeline
  SEVERITY_THRESHOLD: "HIGH,CRITICAL"

# ==============================================
# JOB 1: CONSTRUCTION DE L'IMAGE DOCKER
# ==============================================
build:image:
  stage: build
  
  # Image Docker utilis√©e pour ce job
  image: docker:24
  
  # Service Docker-in-Docker n√©cessaire pour builder
  services:
    - docker:24-dind
  
  # Commandes √† ex√©cuter avant le script principal
  before_script:
    - echo "üîê Connexion au registry GitLab..."
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  
  # Script principal du job
  script:
    - echo "üî® Construction de l'image Docker..."
    - docker build -t ${IMAGE_NAME} .
    
    - echo "üì§ Push de l'image vers le registry..."
    - docker push ${IMAGE_NAME}
    
    - echo "üíæ Sauvegarde de l'image pour le scan..."
    - docker save ${IMAGE_NAME} -o image.tar
  
  # Fichiers √† conserver pour les jobs suivants
  artifacts:
    paths:
      - image.tar
    expire_in: 1 hour

# ==============================================
# JOB 2: SCAN DE S√âCURIT√â AVEC TRIVY
# ==============================================
scan:trivy:
  stage: scan
  
  # Utilisation de l'image Docker officielle de Trivy
  image: 
    name: ghcr.io/aquasecurity/trivy:${TRIVY_VERSION}
    entrypoint: [""]
  
  # D√©pend du job build (r√©cup√®re l'artifact image.tar)
  dependencies:
    - build:image
  
  script:
    - echo "üîç D√©marrage du scan de s√©curit√©..."
    
    # Scan de l'image pour les vuln√©rabilit√©s
    - echo "üìä Scan des vuln√©rabilit√©s..."
    - |
      trivy image \
        --input image.tar \
        --severity ${SEVERITY_THRESHOLD} \
        --exit-code 0 \
        --no-progress \
        --format table
    
    # G√©n√©ration d'un rapport JSON pour analyse
    - echo "üìÑ G√©n√©ration du rapport JSON..."
    - |
      trivy image \
        --input image.tar \
        --severity ${SEVERITY_THRESHOLD} \
        --format json \
        --output vulnerability-report.json
    
    # Analyse des r√©sultats
    - echo "üìà Analyse des r√©sultats..."
    - |
      # Installation de jq pour parser le JSON
      apk add --no-cache jq
      
      # Compter les vuln√©rabilit√©s par s√©v√©rit√©
      CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' vulnerability-report.json)
      HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' vulnerability-report.json)
      
      echo "Vuln√©rabilit√©s CRITICAL: ${CRITICAL}"
      echo "Vuln√©rabilit√©s HIGH: ${HIGH}"
      
      # D√©cision : bloquer si vuln√©rabilit√©s critiques
      if [ "$CRITICAL" -gt 0 ]; then
        echo "‚ùå √âCHEC: Vuln√©rabilit√©s CRITICAL d√©tect√©es!"
        echo "Le pipeline est bloqu√© pour des raisons de s√©curit√©."
        exit 1
      elif [ "$HIGH" -gt 5 ]; then
        echo "‚ö†Ô∏è ATTENTION: Plus de 5 vuln√©rabilit√©s HIGH d√©tect√©es!"
        echo "Consid√©rez la mise √† jour des d√©pendances."
      else
        echo "‚úÖ SUCC√àS: Aucune vuln√©rabilit√© critique d√©tect√©e."
      fi
  
  # Artifacts √† conserver
  artifacts:
    paths:
      - vulnerability-report.json
    expire_in: 30 days
    # Format de rapport pour l'int√©gration GitLab
    reports:
      container_scanning: vulnerability-report.json

# ==============================================
# JOB 3: D√âPLOIEMENT (si scan r√©ussi)
# ==============================================
deploy:staging:
  stage: deploy
  
  # Ce job ne s'ex√©cute que si le scan est OK
  dependencies:
    - scan:trivy
  
  script:
    - echo "üöÄ D√©ploiement vers staging..."
    - echo "L'image ${IMAGE_NAME} est pr√™te pour le d√©ploiement."
    
  
  # R√®gles d'ex√©cution
  rules:
    # D√©ployer uniquement sur la branche main
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    # Pour les autres branches, d√©ploiement manuel
    - when: manual